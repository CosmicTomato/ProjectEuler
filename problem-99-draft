#eul99.py

#PROBLEM STATEMENT
#Largest exponential
#Comparing two numbers written in index form like 2^11 and 3^7 is not difficult, as any calculator would confirm that 211 = 2048 < 37 = 2187.
#However, confirming that 632382^518061 > 519432^525806 would be much more difficult, as both numbers contain over three million digits.
#Using base_exp.txt (right click and 'Save Link/Target As...'), a 22K text file containing one thousand lines with a base/exponent pair on each line, determine which line number has the greatest numerical value.
#NOTE: The first two lines in the file represent the numbers in the example given above.


#NOTES:
#need to check a^b > c^d
#same as ln(a^b) > ln(c^d)
#--> b*ln(a) > d*ln(c)
#easy!


#import built-in natural log function
#log(x) = ln(x)
from math import log


def main():

	#imports data from file and puts it in a list
	#first 2 numbers represent exponent (a^b), next 2 numbers represent next exponent, etc.
	exp = open('base_exp.txt')
	exp_list = exp_file.read().split(',')

	#calculates initial value to compare against
	largest_exp = exp_list[ 1 ] * log ( exp_list[ 0 ] )

	for i in range( 1 , ( len( exp_list ) / 2 ) + 1 ):

		#calculates log of ith exponent
		new_exp = exp_list[ ( 2 * i ) + 1 ] * log ( exp_list[ ( 2 * i ) ] )

		#compares to largest value so far
		if new_exp > largest_exp:
			largest_exp = new_exp

	return largest_exp
